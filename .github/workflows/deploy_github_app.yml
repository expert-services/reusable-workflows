name: Deploy GitHub App
on: 
  workflow_call:
    inputs:
      app-name:
        description: A short nam for the GitHub App that is being deployed
        required: true
        type: string
      cloud-provider: 
        description: The public cloud provider to deploy to
        required: false
        default: az
        type: string
env:
  TF_VAR_client_id: ${{ secrets.CLIENT_ID }}
  TF_VAR_tenant_id: ${{ secrets.TENANT_ID }}
  TF_VAR_subscription_id: ${{ secrets.SUBSCRIPTION_ID }}
  TF_VAR_webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
  TF_VAR_private_key: ${{ secrets.PRIVATE_KEY }}
  TF_VAR_app_id: ${{ secrets.APP_ID }}
jobs:
  deploy:
    name: Azure Using OIDC
    if: ${{ inputs.cloud-provider == 'az' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: OIDC Login to Azure 
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          enable-AzPSSession: true 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
      - name: Deploy Azure Infrastructure
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $storageAccountName = "${{ inputs.app-name }}state$env:GITHUB_REPOSITORY_OWNER".Replace('-','').ToLower()
            if ($storageAccountName.Length -gt 24) {$storageAccountName = $storageAccountName.subString(0,24)}
            $storageAccount = Get-AzStorageAccount | Where-Object {$_.StorageAccountName -like $storageAccountName}
            if ($null -eq $storageAccount) {
              New-AzResourceGroup -Name "${{ inputs.app-name }}-tf-state" -Location eastus | Out-Null
              $storageAccount = New-AzStorageAccount -ResourceGroupName "${{ inputs.app-name }}-tf-state" `
                                                      -Name $storageAccountName `
                                                      -Location eastus `
                                                      -SkuName Standard_GRS `
                                                      -Kind StorageV2 `
                                                      -EnableHttpsTrafficOnly $True
              $container = New-AzStorageContainer -Name $env:GITHUB_REPOSITORY_OWNER-tfstate -Context $storageAccount.Context
            }

            # Deploy infrastructure using Terraform CLI
            $env:TF_VAR_org = $env:GITHUB_REPOSITORY_OWNER
            Set-Location -Path terraform
            terraform init -backend-config="resource_group_name=$($storageAccount.ResourceGroupName)" `
                            -backend-config="storage_account_name=$($storageAccount.StorageAccountName)" `
                            -backend-config="container_name=$env:GITHUB_REPOSITORY_OWNER-tfstate" `
                            -backend-config="key=prod.terraform.tfstate" `
                            -backend-config="use_oidc=true" `
                            -backend-config="subscription_id=$env:TF_VAR_subscription_id" `
                            -backend-config="tenant_id=$env:TF_VAR_tenant_id" `
                            -backend-config="client_id=$env:TF_VAR_client_id" && terraform plan -out out.tfplan && terraform apply -auto-approve out.tfplan
          azPSVersion: "latest"
